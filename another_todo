
Generic definitions
====================

+ ZK (stat/comp)
+ Completeness (stat)
+ Special soundness (stat/comp)
+ Soundness (stat/comp)
+ PoK / extractability (stat/comp)


Generic Results
================


- 1-time sim => ZK (stat/comp)
  (for small "challenge_set")
  (Generic_ZK.ec)

- Special soundness => extractability (stat/comp)
  (Generic_KE.ec)

- extractability => soundness (stat/comp)
  (Axiom: soundness_error such that: x > soundness_error => extraction_success_function x > 0.
  Take SoundnessAdv.
  For statement s not in language:
  - Let v(s) := success of SoundnessAdv
  - By extractability: Extractor(SoundnessAdv,s) -> witness with prob >= "extraction_success_function v(s)"
  - witness does not exist => Extractor(SoundnessAdv,s) -> witness with prob = 0
  - ==> 0 >= extraction_success_function v(s)
  - ==> v(s) <= soundness_error)


- perfect => statistical => computational (Maybe not)


Concrete Results
================


- HC (stat hiding / comp binding):
  + Completeness
  + Special soundness (comp)
  + Sim1 stuff
  +? auto-derived ZK (stat2)
  + auto-derived extractability (comp)
  + auto-derived soundness (comp)


- QR:
  - Completeness
  - Special soundness (perfect)
  - Sim1 stuff
  - auto-derived ZK (?)
  - auto-derived soundness (stat)
  - auto-derived extractability (stat)


- Dlog:
  - Completeness
  - Special soundness (perfect)
  + NOT ZK (because size(challenge_set) big)
  + NOT soundness (because pointless)
  - auto-derived extractability (stat)





